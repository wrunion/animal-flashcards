{"version":3,"sources":["assets/alligator.png","assets/elephant.png","assets/frog.png","assets/giraffe.png","assets/hedgehog.png","assets/kangaroo.png","assets/lion.png","assets/monkey.png","assets/owl.png","assets/pandabear.png","assets/parrot.png","assets/tiger.png","Header/Header.js","FlashCard/FlashCard.js","FlashCard/CardList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","FlashCard","props","state","imageShowing","handleClick","bind","e","this","setState","animalName","animalImage","onClick","src","alt","React","Component","animalList","name","alligator","elephant","frog","giraffe","hedgehog","lion","monkey","owl","kangaroo","tiger","parrot","pandabear","CardList","id","map","animal","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,mJCW5BC,G,MATA,WACb,OACE,4BAAQC,UAAU,yBAChB,oDACA,mF,4CCqBSC,E,kDAxBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACTC,cAAc,GAElB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBALF,E,wDAQPC,GACVC,KAAKL,MAAMC,aACXI,KAAKC,SAAS,CAAEL,cAAe,IAAWI,KAAKC,SAAS,CAAEL,cAAe,M,+BAGjE,IAAD,EAC6BI,KAAKN,MAAjCQ,EADD,EACCA,WAAYC,EADb,EACaA,YACpB,OACE,yBAAKX,UAAU,YAAYY,QAASJ,KAAKH,aACtCG,KAAKL,MAAMC,aACZ,yBAAKS,IAAKF,EAAaG,IAAI,KAAO,4BAAKJ,Q,GAnBvBK,IAAMC,W,yMCcxBC,EAAa,CACjB,CACEC,KAAM,YACNL,IAAKM,KAEP,CACED,KAAM,WACNL,IAAKO,KAEP,CACEF,KAAM,OACNL,IAAKQ,KAEP,CACEH,KAAM,UACNL,IAAKS,KAEP,CACEJ,KAAM,WACNL,IAAKU,KAEP,CACEL,KAAM,OACNL,IAAKW,KAEP,CACEN,KAAM,SACNL,IAAKY,KAEP,CACEP,KAAM,MACNL,IAAKa,KAEP,CACER,KAAM,WACNL,IAAKc,KAEP,CACET,KAAM,QACNL,IAAKe,KAEP,CACEV,KAAM,SACNL,IAAKgB,KAEL,CACAX,KAAM,aACNL,IAAKiB,MAkBMC,EAdE,WACf,OACA,yBAAKC,GAAG,YAAYhC,UAAU,kBAC7BiB,EAAWgB,KAAK,SAAAC,GAAM,OACrB,kBAAC,EAAD,CACElC,UAAU,gCACVU,WAAYwB,EAAOhB,KACnBP,YAAauB,EAAOrB,W,MCxDXsB,MAXf,WACE,OACE,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,eACd,kBAAC,EAAD,OAED,kBAAC,EAAD,QCDcoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8644e6e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alligator.ae959a2b.png\";","module.exports = __webpack_public_path__ + \"static/media/elephant.0fc83bda.png\";","module.exports = __webpack_public_path__ + \"static/media/frog.c5c681d0.png\";","module.exports = __webpack_public_path__ + \"static/media/giraffe.6b261573.png\";","module.exports = __webpack_public_path__ + \"static/media/hedgehog.84089516.png\";","module.exports = __webpack_public_path__ + \"static/media/kangaroo.954492fe.png\";","module.exports = __webpack_public_path__ + \"static/media/lion.e2eb7f1c.png\";","module.exports = __webpack_public_path__ + \"static/media/monkey.7aaef966.png\";","module.exports = __webpack_public_path__ + \"static/media/owl.b059810b.png\";","module.exports = __webpack_public_path__ + \"static/media/pandabear.50e54265.png\";","module.exports = __webpack_public_path__ + \"static/media/parrot.a8908f72.png\";","module.exports = __webpack_public_path__ + \"static/media/tiger.27bb20d3.png\";","import React from 'react';\n\nconst Header = () => {\n  return (\n    <header className=\"Header grid-component\">\n      <h1>Winter's Flash Cards</h1>\n      <h2>Pick a language below to learn new animal names!</h2>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport './FlashCard.css';\nclass FlashCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        imageShowing: true\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(e) {\n    this.state.imageShowing ? \n    this.setState({ imageShowing : false }) : this.setState({ imageShowing : true });\n  }\n\n  render() {\n    const { animalName, animalImage } = this.props;\n    return (\n      <div className=\"FlashCard\" onClick={this.handleClick}>\n        {this.state.imageShowing ?\n        <img src={animalImage} alt=\"\"/> : <h1>{animalName}</h1>}\n      </div>\n    );\n  }\n}\n\nexport default FlashCard;","import React from 'react';\nimport './FlashCard.css';\nimport FlashCard from './FlashCard';\nimport alligator from './../assets/alligator.png';\nimport elephant from './../assets/elephant.png';\nimport frog from './../assets/frog.png';\nimport giraffe from './../assets/giraffe.png';\nimport hedgehog from './../assets/hedgehog.png';\nimport kangaroo from './../assets/kangaroo.png';\nimport lion from './../assets/lion.png';\nimport monkey from './../assets/monkey.png';\nimport owl from './../assets/owl.png';\nimport pandabear from './../assets/pandabear.png';\nimport parrot from './../assets/parrot.png';\nimport tiger from './../assets/tiger.png';\n\nconst animalList = [\n  {\n    name: 'Alligator',\n    src: alligator\n  },\n  {\n    name: 'Elephant',\n    src: elephant\n  },\n  {\n    name: 'Frog',\n    src: frog\n  },\n  {\n    name: 'Giraffe',\n    src: giraffe\n  },\n  {\n    name: 'Hedgehog',\n    src: hedgehog\n  },\n  {\n    name: 'Lion',\n    src: lion\n  },\n  {\n    name: 'Monkey',\n    src: monkey\n  },\n  {\n    name: 'Owl',\n    src: owl\n  },\n  {\n    name: 'Kangaroo',\n    src: kangaroo\n  },\n  {\n    name: 'Tiger',\n    src: tiger\n  }, \n  {\n    name: 'Parrot',\n    src: parrot\n  },\n    {\n    name: 'Panda Bear',\n    src: pandabear\n  }\n]\n\nconst CardList = () => {\n  return(\n  <div id=\"card-list\" className=\"flex-container\">\n  {animalList.map((animal => \n    <FlashCard \n      className=\"grid-container flex-item card\"\n      animalName={animal.name}\n      animalImage={animal.src}\n    />\n    ))}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n// import ButtonClick from './ButtonClick/ButtonClick';\nimport Header from './Header/Header';\n// import FlashCard from './FlashCard/FlashCard';\nimport CardList from './FlashCard/CardList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header-main\">\n       <Header />\n      </div>\n      <CardList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}